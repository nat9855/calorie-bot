import os
import json
import telebot
from telebot import types

import os
from telebot import TeleBot, types

TOKEN = os.getenv("TOKEN")
bot = TeleBot(TOKEN)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
with open("products.json", "r", encoding="utf-8") as f:
    calorie_db = json.load(f)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ —Ü–µ–ª–µ–π –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
user_data = {}
user_goals = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã", "üìä –ü–æ—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏")
    markup.add("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫", "üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫")
    markup.add("üìÑ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", "‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è")
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª–æ—Ä–∏–π. –í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

@bot.message_handler(commands=['—Ü–µ–ª—å'])
def set_goal(message):
    parts = message.text.split()
    if len(parts) != 5:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /—Ü–µ–ª—å –∫–∞–ª–æ—Ä–∏–∏ –±–µ–ª–∫–∏ –∂–∏—Ä—ã —É–≥–ª–µ–≤–æ–¥—ã\n–ü—Ä–∏–º–µ—Ä: /—Ü–µ–ª—å 1500 100 50 100")
        return
    try:
        kcal, protein, fat, carb = map(float, parts[1:])
        user_goals[message.from_user.id] = {
            "kcal": kcal, "protein": protein, "fat": fat, "carb": carb
        }
        bot.send_message(message.chat.id, "–¶–µ–ª–∏ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º –∏ –ë–ñ–£ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ‚úÖ")
    except:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π —á–∏—Å–ª–∞ –±–µ–∑ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è.")

@bot.message_handler(func=lambda msg: msg.text == "‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è")
def how_to_use(message):
    bot.send_message(message.chat.id, "1. –ù–∞–∂–º–∏ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã' –∏ –≤–≤–µ–¥–∏ —Å–ø–∏—Å–æ–∫.\n2. –ü–æ—Ç–æ–º –Ω–∞–∂–º–∏ 'üìä –ü–æ—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏'.\n3. –ú–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫.\n\n–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–µ–ª–∏: /—Ü–µ–ª—å –∫–∞–ª–æ—Ä–∏–∏ –±–µ–ª–∫–∏ –∂–∏—Ä—ã —É–≥–ª–µ–≤–æ–¥—ã")

@bot.message_handler(func=lambda msg: msg.text == "üìÑ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
def show_products(message):
    product_list = "\n".join(calorie_db.keys())
    bot.send_message(message.chat.id, f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n{product_list}")

@bot.message_handler(func=lambda msg: msg.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫")
def show_current_list(message):
    uid = message.from_user.id
    if uid not in user_data or not user_data[uid]:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
    else:
        current = "\n".join(user_data[uid])
        bot.send_message(message.chat.id, f"–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫:\n{current}")

@bot.message_handler(func=lambda msg: msg.text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫")
def clear_list(message):
    uid = message.from_user.id
    user_data[uid] = []
    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω.")

@bot.message_handler(func=lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã")
def request_products(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")
    bot.register_next_step_handler(message, save_products)

def save_products(message):
    uid = message.from_user.id
    lines = message.text.lower().split('\n')
    if uid not in user_data:
        user_data[uid] = []
    user_data[uid].extend(lines)
    bot.send_message(message.chat.id, "–ü—Ä–æ–¥—É–∫—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫.", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üìä –ü–æ—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏")
def calculate(message):
    uid = message.from_user.id
    if uid not in user_data or not user_data[uid]:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å –ø—Ä–æ–¥—É–∫—Ç—ã.")
        return

    total_kcal = total_protein = total_fat = total_carb = 0
    for line in user_data[uid]:
        for name in calorie_db:
            if name in line:
                qty = 1
                if '–≥' in line:
                    qty = int(''.join(filter(str.isdigit, line.split('–≥')[0])))
                    factor = qty / 100
                elif '—à—Ç' in line:
                    qty = int(''.join(filter(str.isdigit, line.split('—à—Ç')[0])))
                    factor = qty
                else:
                    factor = 1

                data = calorie_db[name]
                total_kcal += data['kcal'] * factor
                total_protein += data['protein'] * factor
                total_fat += data['fat'] * factor
                total_carb += data['carb'] * factor

    result = (
        f"–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ:\n"
        f"–ö–∞–ª–æ—Ä–∏–∏: {round(total_kcal)} –∫–∫–∞–ª\n"
        f"–ë–µ–ª–∫–∏: {round(total_protein, 1)} –≥\n"
        f"–ñ–∏—Ä—ã: {round(total_fat, 1)} –≥\n"
        f"–£–≥–ª–µ–≤–æ–¥—ã: {round(total_carb, 1)} –≥\n"
    )

    # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ü–µ–ª–∏, –¥–æ–±–∞–≤–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    if uid in user_goals:
        goals = user_goals[uid]
        result += "\nüìà –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ü–µ–ª–∏:\n"
        result += f"–ö–∞–ª–æ—Ä–∏–∏: {round(total_kcal)} / {goals['kcal']} (–æ—Å—Ç–∞–ª–æ—Å—å: {round(goals['kcal'] - total_kcal)})\n"
        result += f"–ë–µ–ª–∫–∏: {round(total_protein,1)} / {goals['protein']} (–æ—Å—Ç–∞–ª–æ—Å—å: {round(goals['protein'] - total_protein, 1)})\n"
        result += f"–ñ–∏—Ä—ã: {round(total_fat,1)} / {goals['fat']} (–æ—Å—Ç–∞–ª–æ—Å—å: {round(goals['fat'] - total_fat, 1)})\n"
        result += f"–£–≥–ª–µ–≤–æ–¥—ã: {round(total_carb,1)} / {goals['carb']} (–æ—Å—Ç–∞–ª–æ—Å—å: {round(goals['carb'] - total_carb, 1)})"

    bot.send_message(message.chat.id, result)
